//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Runtime.CompilerServices;

namespace Testing
{
   public partial class AllPropertyTypesOptional
   {
      partial void Init();

      /// <summary>
      /// Default constructor. Protected due to required properties, but present because EF needs it.
      /// </summary>
      protected AllPropertyTypesOptional()
      {
         Init();
      }

      /// <summary>
      /// Replaces default constructor, since it's protected. Caller assumes responsibility for setting all required values before saving.
      /// </summary>
      public static AllPropertyTypesOptional CreateAllPropertyTypesOptionalUnsafe()
      {
         return new AllPropertyTypesOptional();
      }

      /// <summary>
      /// Public constructor with required data
      /// </summary>
      /// <param name="id1"></param>
      public AllPropertyTypesOptional(int id1)
      {
         this.Id1 = id1;

         this.OwnedType = new global::Testing.OwnedType();
         Init();
      }

      /// <summary>
      /// Static create function (for use in LINQ queries, etc.)
      /// </summary>
      /// <param name="id1"></param>
      public static AllPropertyTypesOptional Create(int id1)
      {
         return new AllPropertyTypesOptional(id1);
      }

      /*************************************************************************
       * Properties
       *************************************************************************/

      /// <summary>
      /// Backing field for Id
      /// </summary>
      internal int _id;
      /// <summary>
      /// When provided in a partial class, allows value of Id to be changed before setting.
      /// </summary>
      partial void SetId(int oldValue, ref int newValue);
      /// <summary>
      /// When provided in a partial class, allows value of Id to be changed before returning.
      /// </summary>
      partial void GetId(ref int result);

      /// <summary>
      /// Identity, Indexed, Required
      /// </summary>
      [Key]
      [Required]
      public int Id
      {
         get
         {
            int value = _id;
            GetId(ref value);
            return (_id = value);
         }
         set
         {
            int oldValue = _id;
            SetId(oldValue, ref value);
            if (oldValue != value)
            {
               _id = value;
            }
         }
      }

      /// <summary>
      /// Backing field for BinaryAttr
      /// </summary>
      protected byte[] _binaryAttr;
      /// <summary>
      /// When provided in a partial class, allows value of BinaryAttr to be changed before setting.
      /// </summary>
      partial void SetBinaryAttr(byte[] oldValue, ref byte[] newValue);
      /// <summary>
      /// When provided in a partial class, allows value of BinaryAttr to be changed before returning.
      /// </summary>
      partial void GetBinaryAttr(ref byte[] result);

      public byte[] BinaryAttr
      {
         get
         {
            byte[] value = _binaryAttr;
            GetBinaryAttr(ref value);
            return (_binaryAttr = value);
         }
         set
         {
            byte[] oldValue = _binaryAttr;
            SetBinaryAttr(oldValue, ref value);
            if (oldValue != value)
            {
               _binaryAttr = value;
            }
         }
      }

      /// <summary>
      /// Backing field for BooleanAttr
      /// </summary>
      protected bool? _booleanAttr;
      /// <summary>
      /// When provided in a partial class, allows value of BooleanAttr to be changed before setting.
      /// </summary>
      partial void SetBooleanAttr(bool? oldValue, ref bool? newValue);
      /// <summary>
      /// When provided in a partial class, allows value of BooleanAttr to be changed before returning.
      /// </summary>
      partial void GetBooleanAttr(ref bool? result);

      public bool? BooleanAttr
      {
         get
         {
            bool? value = _booleanAttr;
            GetBooleanAttr(ref value);
            return (_booleanAttr = value);
         }
         set
         {
            bool? oldValue = _booleanAttr;
            SetBooleanAttr(oldValue, ref value);
            if (oldValue != value)
            {
               _booleanAttr = value;
            }
         }
      }

      /// <summary>
      /// Backing field for ByteAttr
      /// </summary>
      protected byte? _byteAttr;
      /// <summary>
      /// When provided in a partial class, allows value of ByteAttr to be changed before setting.
      /// </summary>
      partial void SetByteAttr(byte? oldValue, ref byte? newValue);
      /// <summary>
      /// When provided in a partial class, allows value of ByteAttr to be changed before returning.
      /// </summary>
      partial void GetByteAttr(ref byte? result);

      public byte? ByteAttr
      {
         get
         {
            byte? value = _byteAttr;
            GetByteAttr(ref value);
            return (_byteAttr = value);
         }
         set
         {
            byte? oldValue = _byteAttr;
            SetByteAttr(oldValue, ref value);
            if (oldValue != value)
            {
               _byteAttr = value;
            }
         }
      }

      /// <summary>
      /// Backing field for DateTimeAttr
      /// </summary>
      protected DateTime? _dateTimeAttr;
      /// <summary>
      /// When provided in a partial class, allows value of DateTimeAttr to be changed before setting.
      /// </summary>
      partial void SetDateTimeAttr(DateTime? oldValue, ref DateTime? newValue);
      /// <summary>
      /// When provided in a partial class, allows value of DateTimeAttr to be changed before returning.
      /// </summary>
      partial void GetDateTimeAttr(ref DateTime? result);

      public DateTime? DateTimeAttr
      {
         get
         {
            DateTime? value = _dateTimeAttr;
            GetDateTimeAttr(ref value);
            return (_dateTimeAttr = value);
         }
         set
         {
            DateTime? oldValue = _dateTimeAttr;
            SetDateTimeAttr(oldValue, ref value);
            if (oldValue != value)
            {
               _dateTimeAttr = value;
            }
         }
      }

      /// <summary>
      /// Backing field for DateTimeOffsetAttr
      /// </summary>
      protected DateTimeOffset? _dateTimeOffsetAttr;
      /// <summary>
      /// When provided in a partial class, allows value of DateTimeOffsetAttr to be changed before setting.
      /// </summary>
      partial void SetDateTimeOffsetAttr(DateTimeOffset? oldValue, ref DateTimeOffset? newValue);
      /// <summary>
      /// When provided in a partial class, allows value of DateTimeOffsetAttr to be changed before returning.
      /// </summary>
      partial void GetDateTimeOffsetAttr(ref DateTimeOffset? result);

      public DateTimeOffset? DateTimeOffsetAttr
      {
         get
         {
            DateTimeOffset? value = _dateTimeOffsetAttr;
            GetDateTimeOffsetAttr(ref value);
            return (_dateTimeOffsetAttr = value);
         }
         set
         {
            DateTimeOffset? oldValue = _dateTimeOffsetAttr;
            SetDateTimeOffsetAttr(oldValue, ref value);
            if (oldValue != value)
            {
               _dateTimeOffsetAttr = value;
            }
         }
      }

      /// <summary>
      /// Backing field for DecimalAttr
      /// </summary>
      protected decimal? _decimalAttr;
      /// <summary>
      /// When provided in a partial class, allows value of DecimalAttr to be changed before setting.
      /// </summary>
      partial void SetDecimalAttr(decimal? oldValue, ref decimal? newValue);
      /// <summary>
      /// When provided in a partial class, allows value of DecimalAttr to be changed before returning.
      /// </summary>
      partial void GetDecimalAttr(ref decimal? result);

      public decimal? DecimalAttr
      {
         get
         {
            decimal? value = _decimalAttr;
            GetDecimalAttr(ref value);
            return (_decimalAttr = value);
         }
         set
         {
            decimal? oldValue = _decimalAttr;
            SetDecimalAttr(oldValue, ref value);
            if (oldValue != value)
            {
               _decimalAttr = value;
            }
         }
      }

      /// <summary>
      /// Backing field for DoubleAttr
      /// </summary>
      protected double? _doubleAttr;
      /// <summary>
      /// When provided in a partial class, allows value of DoubleAttr to be changed before setting.
      /// </summary>
      partial void SetDoubleAttr(double? oldValue, ref double? newValue);
      /// <summary>
      /// When provided in a partial class, allows value of DoubleAttr to be changed before returning.
      /// </summary>
      partial void GetDoubleAttr(ref double? result);

      public double? DoubleAttr
      {
         get
         {
            double? value = _doubleAttr;
            GetDoubleAttr(ref value);
            return (_doubleAttr = value);
         }
         set
         {
            double? oldValue = _doubleAttr;
            SetDoubleAttr(oldValue, ref value);
            if (oldValue != value)
            {
               _doubleAttr = value;
            }
         }
      }

      /// <summary>
      /// Backing field for GuidAttr
      /// </summary>
      protected Guid? _guidAttr;
      /// <summary>
      /// When provided in a partial class, allows value of GuidAttr to be changed before setting.
      /// </summary>
      partial void SetGuidAttr(Guid? oldValue, ref Guid? newValue);
      /// <summary>
      /// When provided in a partial class, allows value of GuidAttr to be changed before returning.
      /// </summary>
      partial void GetGuidAttr(ref Guid? result);

      public Guid? GuidAttr
      {
         get
         {
            Guid? value = _guidAttr;
            GetGuidAttr(ref value);
            return (_guidAttr = value);
         }
         set
         {
            Guid? oldValue = _guidAttr;
            SetGuidAttr(oldValue, ref value);
            if (oldValue != value)
            {
               _guidAttr = value;
            }
         }
      }

      /// <summary>
      /// Backing field for Int16Attr
      /// </summary>
      protected short? _int16Attr;
      /// <summary>
      /// When provided in a partial class, allows value of Int16Attr to be changed before setting.
      /// </summary>
      partial void SetInt16Attr(short? oldValue, ref short? newValue);
      /// <summary>
      /// When provided in a partial class, allows value of Int16Attr to be changed before returning.
      /// </summary>
      partial void GetInt16Attr(ref short? result);

      public short? Int16Attr
      {
         get
         {
            short? value = _int16Attr;
            GetInt16Attr(ref value);
            return (_int16Attr = value);
         }
         set
         {
            short? oldValue = _int16Attr;
            SetInt16Attr(oldValue, ref value);
            if (oldValue != value)
            {
               _int16Attr = value;
            }
         }
      }

      /// <summary>
      /// Backing field for Int32Attr
      /// </summary>
      protected int? _int32Attr;
      /// <summary>
      /// When provided in a partial class, allows value of Int32Attr to be changed before setting.
      /// </summary>
      partial void SetInt32Attr(int? oldValue, ref int? newValue);
      /// <summary>
      /// When provided in a partial class, allows value of Int32Attr to be changed before returning.
      /// </summary>
      partial void GetInt32Attr(ref int? result);

      public int? Int32Attr
      {
         get
         {
            int? value = _int32Attr;
            GetInt32Attr(ref value);
            return (_int32Attr = value);
         }
         set
         {
            int? oldValue = _int32Attr;
            SetInt32Attr(oldValue, ref value);
            if (oldValue != value)
            {
               _int32Attr = value;
            }
         }
      }

      /// <summary>
      /// Backing field for Int64Attr
      /// </summary>
      protected long? _int64Attr;
      /// <summary>
      /// When provided in a partial class, allows value of Int64Attr to be changed before setting.
      /// </summary>
      partial void SetInt64Attr(long? oldValue, ref long? newValue);
      /// <summary>
      /// When provided in a partial class, allows value of Int64Attr to be changed before returning.
      /// </summary>
      partial void GetInt64Attr(ref long? result);

      public long? Int64Attr
      {
         get
         {
            long? value = _int64Attr;
            GetInt64Attr(ref value);
            return (_int64Attr = value);
         }
         set
         {
            long? oldValue = _int64Attr;
            SetInt64Attr(oldValue, ref value);
            if (oldValue != value)
            {
               _int64Attr = value;
            }
         }
      }

      /// <summary>
      /// Backing field for SingleAttr
      /// </summary>
      protected Single? _singleAttr;
      /// <summary>
      /// When provided in a partial class, allows value of SingleAttr to be changed before setting.
      /// </summary>
      partial void SetSingleAttr(Single? oldValue, ref Single? newValue);
      /// <summary>
      /// When provided in a partial class, allows value of SingleAttr to be changed before returning.
      /// </summary>
      partial void GetSingleAttr(ref Single? result);

      public Single? SingleAttr
      {
         get
         {
            Single? value = _singleAttr;
            GetSingleAttr(ref value);
            return (_singleAttr = value);
         }
         set
         {
            Single? oldValue = _singleAttr;
            SetSingleAttr(oldValue, ref value);
            if (oldValue != value)
            {
               _singleAttr = value;
            }
         }
      }

      /// <summary>
      /// Backing field for StringAttr
      /// </summary>
      protected string _stringAttr;
      /// <summary>
      /// When provided in a partial class, allows value of StringAttr to be changed before setting.
      /// </summary>
      partial void SetStringAttr(string oldValue, ref string newValue);
      /// <summary>
      /// When provided in a partial class, allows value of StringAttr to be changed before returning.
      /// </summary>
      partial void GetStringAttr(ref string result);

      public string StringAttr
      {
         get
         {
            string value = _stringAttr;
            GetStringAttr(ref value);
            return (_stringAttr = value);
         }
         set
         {
            string oldValue = _stringAttr;
            SetStringAttr(oldValue, ref value);
            if (oldValue != value)
            {
               _stringAttr = value;
            }
         }
      }

      /// <summary>
      /// Backing field for TimeAttr
      /// </summary>
      protected TimeSpan? _timeAttr;
      /// <summary>
      /// When provided in a partial class, allows value of TimeAttr to be changed before setting.
      /// </summary>
      partial void SetTimeAttr(TimeSpan? oldValue, ref TimeSpan? newValue);
      /// <summary>
      /// When provided in a partial class, allows value of TimeAttr to be changed before returning.
      /// </summary>
      partial void GetTimeAttr(ref TimeSpan? result);

      public TimeSpan? TimeAttr
      {
         get
         {
            TimeSpan? value = _timeAttr;
            GetTimeAttr(ref value);
            return (_timeAttr = value);
         }
         set
         {
            TimeSpan? oldValue = _timeAttr;
            SetTimeAttr(oldValue, ref value);
            if (oldValue != value)
            {
               _timeAttr = value;
            }
         }
      }

      /// <summary>
      /// Backing field for Id1
      /// </summary>
      internal int _id1;
      /// <summary>
      /// When provided in a partial class, allows value of Id1 to be changed before setting.
      /// </summary>
      partial void SetId1(int oldValue, ref int newValue);
      /// <summary>
      /// When provided in a partial class, allows value of Id1 to be changed before returning.
      /// </summary>
      partial void GetId1(ref int result);

      /// <summary>
      /// Identity, Indexed, Required
      /// </summary>
      [Key]
      [Required]
      public int Id1
      {
         get
         {
            int value = _id1;
            GetId1(ref value);
            return (_id1 = value);
         }
         set
         {
            int oldValue = _id1;
            SetId1(oldValue, ref value);
            if (oldValue != value)
            {
               _id1 = value;
            }
         }
      }

      /// <summary>
      /// Concurrency token
      /// </summary>
      [Timestamp]
      public Byte[] Timestamp { get; set; }

      /*************************************************************************
       * Navigation properties
       *************************************************************************/

      /// <summary>
      /// Backing field for OwnedType
      /// </summary>
      protected global::Testing.OwnedType _ownedType;

      /// <summary>
      /// When provided in a partial class, allows value of OwnedType to be changed before setting.
      /// </summary>
      partial void SetOwnedType(global::Testing.OwnedType oldValue, ref global::Testing.OwnedType newValue);

      /// <summary>
      /// When provided in a partial class, allows value of OwnedType to be changed before returning.
      /// </summary>
      partial void GetOwnedType(ref global::Testing.OwnedType result);

      public virtual global::Testing.OwnedType OwnedType
      {
         get
         {
            global::Testing.OwnedType value = _ownedType;
            GetOwnedType(ref value);
            return (_ownedType = value);
         }
         set
         {
            global::Testing.OwnedType oldValue = _ownedType;
            SetOwnedType(oldValue, ref value);
            if (oldValue != value)
            {
               _ownedType = value;
            }
         }
      }

   }
}

